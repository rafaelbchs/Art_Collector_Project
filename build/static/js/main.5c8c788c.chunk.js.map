{"version":3,"sources":["components/Title.js","api/index.js","components/Search.js","components/Preview.js","components/Feature.js","components/Loading.js","index.js"],"names":["Title","id","BASE_URL","KEY","process","fetchQueryResultsFromTermAndValue","term","value","a","fetch","encodeURI","split","join","response","json","data","fetchQueryResultsFromURL","url","fetchQueryResults","century","classification","queryString","fetchAllCenturies","localStorage","getItem","JSON","parse","records","setItem","stringify","fetchAllClassifications","fetchAllMedium","Search","props","setSearchResults","setIsLoading","setFeaturedResult","useState","centuryList","setCenturyList","classificationList","setClassificationList","setQueryString","setCentury","setClassification","medium","setMedium","mediumList","setMediumList","predictionResult","setPredictionResult","useEffect","Promise","all","then","centuries","classifications","error","console","onSubmit","event","preventDefault","results","htmlFor","type","placeholder","onChange","target","map","result","onClick","title","className","length","name","index","key","Preview","searchResults","info","fetchPage","pageUrl","disabled","prev","next","record","primaryimageurl","src","alt","description","Searchable","searchTerm","searchValue","href","Feature","featuredResult","dated","images","culture","technique","style","dimensions","people","department","division","contact","creditline","Fragment","person","image","baseimageurl","Loading","App","isLoading","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5c8c788c.chunk.js","sourcesContent":["import React from \"react\";\n\n\n\nconst Title = () => {\n  return (\n    <div id=\"title\">\n      <h1>The Art Collector</h1>\n      <h5>Search the Harvard Art Museums' Private Collections</h5>\n    </div>\n  );\n};\nexport default Title;\n","/**\n * This file features and exports all of your calls to the API\n * \n * You need to replace YOUR_API_KEY in the string associated with KEY with your actual API key\n */\nexport const BASE_URL = 'https://api.harvardartmuseums.org';\nexport const KEY = process.env.REACT_APP_API_KEY\n\n/**\n * This will make a call to the API for a single term and value (e.g. \"person\", and \"unknown\"), and return the result\n */\nexport async function fetchQueryResultsFromTermAndValue(term, value) {\n  try {\n    const response = await fetch(`${ BASE_URL }/object?${ KEY }&${ term }=${ encodeURI(value.split('-').join('|')) }`);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This will make a call to the API for a preformed url (useful for previous and next buttons), and return the result\n */\nexport async function fetchQueryResultsFromURL(url) {\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * Requires an object { century: '', classification: '', queryString: '' } to be passed in as an argument\n * \n * Then makes a call to the API, and returns the first page of results\n */\nexport async function fetchQueryResults({\n  century,\n  classification,\n  queryString,\n}) {\n  const url = `${ BASE_URL }/object?${ KEY }&classification=${ classification }&century=${ \n    century }&keyword=${ queryString }`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This returns early if there are centuries stored in localStorage, or fetches them from the API and stores them in localStorage if not\n */\nexport async function fetchAllCenturies() {\n  if (localStorage.getItem('centuries')) {\n    return JSON.parse(localStorage.getItem('centuries'));\n  }\n\n  const url = `${ BASE_URL }/century?${ KEY }&size=100&sort=temporalorder`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const records = data.records;\n\n    localStorage.setItem('centuries', JSON.stringify(records));\n\n    return records;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This returns early if there are classifications stored in localStorage, or fetches them from the API and stores them in localStorage if not \n */\nexport async function fetchAllClassifications() {\n  if (localStorage.getItem('classifications')) {\n    return JSON.parse(localStorage.getItem('classifications'));\n  }\n\n  const url = `${ BASE_URL }/classification?${ KEY }&size=100&sort=name`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const records = data.records;\n\n    localStorage.setItem('classifications', JSON.stringify(records));\n\n    return records;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function fetchAllMedium() {\n  if (localStorage.getItem('medium')) {\n    return JSON.parse(localStorage.getItem('medium'));\n  }\n\n  const url = `${ BASE_URL }/classification?${ KEY }&size=100&sort=name`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const records = data.records;\n\n    localStorage.setItem('medium', JSON.stringify(records));\n\n    return records;\n  } catch (error) {\n    throw error;\n  }\n}","import React, { useEffect, useState } from 'react';\n\n/**\n * Don't touch these imports!\n */\nimport { \n  fetchAllCenturies,\n  fetchAllClassifications,\n  fetchQueryResults,\n  fetchAllMedium\n} from '../api';\n\nconst Search = (props) => {\n  const {setSearchResults, setIsLoading, setFeaturedResult} = props\n\n  const [centuryList, setCenturyList] = useState([])\n  const [classificationList, setClassificationList] = useState([])\n\n  const [queryString, setQueryString] = useState('')\n\n  const [century, setCentury] = useState('any')\n  const [classification, setClassification] = useState('any')\n\n  const [medium, setMedium] = useState(\"any\")\n  const [mediumList, setMediumList] = useState([])\n  \n\n  const [predictionResult, setPredictionResult] = useState([])\n\n  useEffect(() => {\n    try{\n    Promise.all([fetchAllCenturies(),fetchAllClassifications(),fetchAllMedium()])\n    .then(([centuries,classifications,medium]) => {\n        setCenturyList(centuries);\n        setClassificationList(classifications);\n        setMediumList(medium)\n      }\n    )}\n    catch(error){\n      console.error(error);\n    }\n\n  }, []);\n\n  return <form id=\"search\" onSubmit={async (event) => {\n    event.preventDefault();\n    setIsLoading(true);\n    try{\n      const results = await fetchQueryResults({\n        century,\n        classification,\n        medium,\n        queryString\n        \n      })\n      setSearchResults(results);\n    }catch(error){\n      console.error(error)\n    }\n    finally{\n      setIsLoading(false)\n    }\n  }}>\n    <fieldset>\n      <label htmlFor=\"keywords\">Query</label>\n      <input \n        id=\"keywords\" \n        type=\"text\" \n        placeholder=\"enter keywords...\" \n        value={queryString} \n        onChange={async (event)=>{\n          setQueryString(event.target.value)\n          \n          try{\n          const results = await fetchQueryResults({\n            century,\n            classification,\n            medium,\n            queryString})\n          setPredictionResult(results.records)\n          }catch(error){\n          console.error(error)\n          }\n          }}/>\n        <ul>\n        {predictionResult.map((result)=>{\n          return(\n            <li onClick={()=>{setFeaturedResult(result)}}>{result.title}</li>\n            )\n        })}\n        </ul>\n    </fieldset>\n    <fieldset>\n      <label htmlFor=\"select-classification\">Classification <span className=\"classification-count\">({ classificationList.length })</span></label>\n      <select \n        name=\"classification\"\n        id=\"select-classification\"\n        value={classification} \n        onChange={(event)=>{setClassification(event.target.value)}}>\n          <option value=\"any\">Any</option>\n        {classificationList.map((value,index)=>{\n          return <option value={value.name} key={index}>{value.name}</option>\n        })}\n      </select>\n    </fieldset>\n    <fieldset>\n      <label htmlFor=\"select-century\">Century <span className=\"century-count\">({ centuryList.length })</span></label>\n      <select \n        name=\"century\" \n        id=\"select-century\"\n        value={century} \n        onChange={(event)=>{setCentury(event.target.value)}}>\n          <option value=\"any\">Any</option>\n        {centuryList.map((value,index)=>{\n         \n          return <option value={value.name} key={index}>{value.name}</option>\n        })}\n      </select>\n     </fieldset>\n     <fieldset>\n      <label htmlFor=\"select-medium\">Medium <span className=\"medium-count\">({ mediumList.length })</span></label>\n      <select \n        name=\"medium\" \n        id=\"select-medium\"\n        value={medium} \n        onChange={(event)=>{setMedium(event.target.value)}}>\n          <option value=\"any\">Any</option>\n        {mediumList.map((value,index)=>{   \n          return <option value={value.name} key={index}>{value.name}</option>\n        })}\n      </select>\n     </fieldset>\n    <button>SEARCH</button>\n  </form>\n}\n\nexport default Search;","import React from \"react\";\n\n\nimport { fetchQueryResultsFromURL } from \"../api\";\n\nconst Preview = (props) => {\n  const { setSearchResults, setIsLoading, setFeaturedResult } = props;\n  const { info, records } = props.searchResults;\n\n  async function fetchPage(pageUrl) {\n    setIsLoading(true);\n\n    try {\n      const results = await fetchQueryResultsFromURL(pageUrl);\n      setSearchResults(results);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  return (\n    <aside id=\"preview\">\n      <header className=\"pagination\">\n        {/* This button should be disabled if nothing is set in info.prev, and should call fetchPage with info.prev when clicked */}\n        <button\n          disabled={!info.prev}\n          className=\"previous\"\n          onClick={() => {\n            fetchPage(info.prev);\n          }}\n        >\n          Previous\n        </button>\n        {/* This button should be disabled if nothing is set in info.next, and should call fetchPage with info.next when clicked */}\n        <button\n          disabled={!info.next}\n          className=\"next\"\n          onClick={() => {\n            fetchPage(info.next);\n          }}\n        >\n          Next\n        </button>\n      </header>\n      <section className=\"results\">\n        {\n          records.map((record,index) => {\n            return (\n              <div\n                key={index}\n                className=\"object-preview\"\n                onClick={(event) => {\n                  event.preventDefault();\n                  setFeaturedResult(record);\n                  // prevent the default\n                  // set the featured result to be this record, using setFeaturedResult\n                }}\n              >\n                {\n                  record.primaryimageurl ? (\n                    <img\n                      src={record.primaryimageurl}\n                      alt={record.description}\n                    />\n                  ) : null\n                  // if the record.primaryimageurl exists, show this: <img src={ record.primaryimageurl } alt={ record.description } />, otherwise show nothing\n                }\n                {\n                  record.title ? <h3>{record.title}</h3> : <h3>MISSING INFO</h3>\n                  // if the record.title exists, add this: <h3>{ record.title }</h3>, otherwise show this: <h3>MISSING INFO</h3>\n                }\n              </div>\n            );\n          })\n        }\n      </section>\n    </aside>\n  );\n};\n\nexport default Preview;\n","import React, { Fragment } from \"react\";\n\n// Don't touch this import\nimport { fetchQueryResultsFromTermAndValue } from \"../api\";\nimport Title from \"./Title\";\n\nconst Searchable = (props) => {\n  const { searchTerm, searchValue, setIsLoading, setSearchResults } = props;\n  return (\n    <span className=\"content\">\n      <a\n        href=\"#\"\n        onClick={async (event) => {\n          event.preventDefault();\n          setIsLoading(true);\n          try {\n            const result = await fetchQueryResultsFromTermAndValue(\n              searchTerm,\n              searchValue\n            );\n            setSearchResults(result);\n          } catch (error) {\n            console.error(error);\n          } finally {\n            setIsLoading(false);\n          }\n        }}\n      >\n        {searchValue}\n      </a>\n    </span>\n  );\n};\n\nconst Feature = (props) => {\n  const { featuredResult, setIsLoading, setSearchResults } = props;\n  if (!featuredResult) {\n    return <main id=\"feature\"></main>;\n  }\n  const {\n    title,\n    dated,\n    images,\n    primaryimageurl,\n    description,\n    culture,\n    style,\n    technique,\n    medium,\n    dimensions,\n    people,\n    department,\n    division,\n    contact,\n    creditline,\n  } = featuredResult;\n  return (\n    <main id=\"feature\">\n      <div className=\"object-feature\">\n        <header>\n          <h3>{title}</h3>\n          <h4>{dated}</h4>\n        </header>\n        <section className=\"facts\">\n          {description ? (\n            <React.Fragment>\n              <span className=\"title\">Description</span>\n              <span className=\"content\">{description}</span>\n            </React.Fragment>\n          ) : null}\n\n          <span className=\"title\">Culture</span>\n          <Searchable\n            searchValue={culture}\n            searchTerm=\"culture\"\n            setSearchResults={setSearchResults}\n            setIsLoading={setIsLoading}\n          />\n\n          {technique ? (\n            <React.Fragment>\n              <span className=\"title\">Technique</span>\n              <Searchable\n                searchValue={technique}\n                searchTerm=\"technique\"\n                setSearchResults={setSearchResults}\n                setIsLoading={setIsLoading}\n              />\n            </React.Fragment>\n          ) : null}\n\n          {medium ? (\n            <React.Fragment>\n              <span className=\"title\">Medium</span>\n              <Searchable\n                searchValue={medium}\n                searchTerm=\"medium\"\n                setSearchResults={setSearchResults}\n                setIsLoading={setIsLoading}\n              />\n            </React.Fragment>\n          ) : null}\n\n          {people ? (\n            <React.Fragment>\n              {people.map((person) => {\n                return (\n                  <>\n                    <span className=\"title\">Person</span>\n                    <Searchable\n                      searchValue={person.name}\n                      searchTerm=\"person\"\n                      setSearchResults={setSearchResults}\n                      setIsLoading={setIsLoading}\n                    />\n                  </>\n                );\n              })}\n            </React.Fragment>\n          ) : null}\n\n          {dimensions ? (\n            <React.Fragment>\n              <span className=\"title\">Dimensions</span>\n              <span className=\"content\">{dimensions}</span>\n            </React.Fragment>\n          ) : null}\n\n          {department ? (\n            <React.Fragment>\n              <span className=\"title\">Department</span>\n              <span className=\"content\">{department}</span>\n            </React.Fragment>\n          ) : null}\n\n          <span className=\"title\">Division</span>\n          <span className=\"content\">{division}</span>\n\n          {contact ? (\n            <React.Fragment>\n              <span className=\"title\">Contact</span>\n              <span className=\"content\">\n                <a href=\"#\">{contact}</a>\n              </span>\n            </React.Fragment>\n          ) : null}\n\n          <span className=\"title\">CreditLine</span>\n          <span className=\"content\">{creditline}</span>\n        </section>\n\n        {images ? (\n          <React.Fragment>\n            <section className=\"photos\">\n              {images.map((image) => {\n                return <img src={image.baseimageurl} alt=\"any\" />;\n              })}\n            </section>\n          </React.Fragment>\n        ) : null}\n      </div>\n    </main>\n  );\n};\n\nexport default Feature;\n","import React from \"react\";\n\n\nconst Loading = () => {\n  return (\n    <div id=\"loading\">\n      <h2 className=\"message\">Searching...</h2>\n    </div>\n  );\n};\n\nexport default Loading;\n","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\n// These imports won't work until you fix ./components/index.js\nimport {\n  Feature,\n  Loading,\n  Preview,\n  Search,\n  Title\n} from './components';\n\nconst App = () => {\n  const [searchResults,setSearchResults]= useState({info: {}, records: []});\n  const [featuredResult,setFeaturedResult]= useState(null);\n  const [isLoading,setIsLoading] = useState(false);\n\n  return <div className=\"app\">\n    {/* <Title /> is static, doesn't need any props */}\n    <Title />\n    {/* <Search /> needs props for setIsLoading and setSearchResults (trigger <Loading /> on search start/end, and transfer results to preview) */}\n    <Search setFeaturedResult={setFeaturedResult} setIsLoading= {setIsLoading} setSearchResults={setSearchResults} />\n    {/* <Preview /> needs props for searchResults, setIsLoading and setSearchResults (clicking prev/next buttons), and setFeaturedResult (clicking a preview) */}\n    <Preview searchResults={searchResults} setSearchResults={setSearchResults} setIsLoading= {setIsLoading} setFeaturedResult={setFeaturedResult}/>\n    {/* <Feature /> needs props for featuredResult, as well as setIsLoading and setSearchResults (clicking on searchable properties) */}\n    <Feature featuredResult={featuredResult} setSearchResults={setSearchResults} setIsLoading= {setIsLoading}  />\n    {/* <Loading /> is static, but should only render when isLoading is true */}\n    {isLoading ? <Loading /> : null} {/* use a ternary and render null if isLoading is false */}\n  </div>\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('app')\n)"],"sourceRoot":""}